{
  "Design System Button": {
    "prefix": "dsbutton",
    "body": [
      "<Button",
      "  variant=\"${1|primary,secondary,ghost,danger|}\"",
      "  onClick={${2:handleClick}}",
      "  disabled={${3:false}}",
      ">",
      "  ${4:Label}",
      "</Button>"
    ],
    "description": "Button following design system"
  },
  
  "Design System Card": {
    "prefix": "dscard",
    "body": [
      "<Card>",
      "  <CardHeader>",
      "    <CardTitle>${1:Title}</CardTitle>",
      "  </CardHeader>",
      "  <CardContent>",
      "    ${2:Content}",
      "  </CardContent>",
      "</Card>"
    ],
    "description": "Card following design system"
  },
  
  "Design System Container": {
    "prefix": "dscontainer",
    "body": [
      "<div className=\"min-h-screen bg-gray-50\">",
      "  <div className=\"max-w-md mx-auto p-4\">",
      "    ${1:content}",
      "  </div>",
      "</div>"
    ],
    "description": "Standard container layout"
  },
  
  "Design System Input": {
    "prefix": "dsinput",
    "body": [
      "<Input",
      "  label=\"${1:Label}\"",
      "  type=\"${2|text,email,password,tel|}\"",
      "  placeholder=\"${3:Placeholder}\"",
      "  value={${4:value}}",
      "  onChange={${5:onChange}}",
      "  error={${6:error}}",
      "/>"
    ],
    "description": "Input following design system"
  },
  
  "4px Grid Spacing": {
    "prefix": "grid",
    "body": "${1|p,m,gap,space|}-${2|1,2,3,4,6,8,12,16|}",
    "description": "Spacing on 4px grid"
  },
  
  "Typography Size": {
    "prefix": "text",
    "body": "text-size-${1|1,2,3,4|}",
    "description": "Design system font sizes"
  },
  
  "Font Weight": {
    "prefix": "font",
    "body": "font-${1|regular,semibold|}",
    "description": "Design system font weights"
  },
  
  "Form Section": {
    "prefix": "dsform",
    "body": [
      "<form onSubmit={handleSubmit}>",
      "  <div className=\"space-y-4\">",
      "    ${1:fields}",
      "  </div>",
      "  <div className=\"pt-4\">",
      "    <Button type=\"submit\" loading={loading}>",
      "      ${2:Submit}",
      "    </Button>",
      "  </div>",
      "</form>"
    ],
    "description": "Form with proper spacing"
  },
  
  "Error Handling": {
    "prefix": "dserror",
    "body": [
      "try {",
      "  const data = await ${1:apiCall}();",
      "  ${2:// Success handling}",
      "} catch (error) {",
      "  if (error instanceof ApiError) {",
      "    setError(error.message);",
      "  } else {",
      "    setError('Something went wrong');",
      "  }",
      "}"
    ],
    "description": "Standard error handling pattern"
  },
  
  "API Route Handler": {
    "prefix": "api-route",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "import { withErrorHandler } from '@/app/api/lib/handler';",
      "import { z } from 'zod';",
      "",
      "const schema = z.object({",
      "  $1",
      "});",
      "",
      "export const POST = withErrorHandler(async (request: NextRequest) => {",
      "  const body = await request.json();",
      "  const data = schema.parse(body);",
      "  ",
      "  $0",
      "  ",
      "  return NextResponse.json({ success: true });",
      "});"
    ],
    "description": "API route with error handling and validation"
  },
  
  "React Query Hook": {
    "prefix": "use-query",
    "body": [
      "import { useQuery } from '@tanstack/react-query';",
      "import { apiClient } from '@/lib/api/client';",
      "",
      "export function use${1:Resource}(${2:id?: string}) {",
      "  return useQuery({",
      "    queryKey: ['${3:resource}', ${2:id}],",
      "    queryFn: () => apiClient(`/${3:resource}/\${${2:id}}`),",
      "    enabled: !!${2:id},",
      "  });",
      "}"
    ],
    "description": "React Query hook for data fetching"
  },
  
  "React Query Mutation": {
    "prefix": "use-mutation",
    "body": [
      "import { useMutation } from '@tanstack/react-query';",
      "import { apiClient } from '@/lib/api/client';",
      "import { queryClient } from '@/lib/query/client';",
      "",
      "export function use${1:Create}${2:Resource}() {",
      "  return useMutation({",
      "    mutationFn: (data: ${3:CreateData}) => ",
      "      apiClient('/${4:resources}', {",
      "        method: 'POST',",
      "        body: JSON.stringify(data),",
      "      }),",
      "    onSuccess: () => {",
      "      queryClient.invalidateQueries({ queryKey: ['${4:resources}'] });",
      "    },",
      "  });",
      "}"
    ],
    "description": "React Query mutation hook"
  },
  
  "Supabase Query": {
    "prefix": "supabase-query",
    "body": [
      "const { data, error } = await supabase",
      "  .from('${1:table}')",
      "  .select('${2:*}')",
      "  .eq('${3:column}', ${4:value})",
      "  .single();",
      "",
      "if (error) {",
      "  throw error;",
      "}"
    ],
    "description": "Supabase query with error handling"
  },
  
  "Form Field": {
    "prefix": "form-field",
    "body": [
      "<div className=\"space-y-2\">",
      "  <label htmlFor=\"${1:field}\" className=\"text-size-3 font-semibold text-gray-700\">",
      "    ${2:Label}",
      "  </label>",
      "  <input",
      "    id=\"${1:field}\"",
      "    type=\"${3:text}\"",
      "    className=\"w-full h-12 px-4 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none transition-colors\"",
      "    {...register('${1:field}')}",
      "  />",
      "  {errors.${1:field} && (",
      "    <p className=\"text-size-4 text-red-600\">{errors.${1:field}.message}</p>",
      "  )}",
      "</div>"
    ],
    "description": "Form field with React Hook Form"
  }
}
