[tool.poetry]
name = "python-agent-boilerplate"
version = "0.1.0"
description = "AI-powered Python development with Pydantic agents, FastAPI, and data pipelines"
authors = ["Shawn Smith <shawn@bearingfruit.co>"]
readme = "README.md"
python = "^3.11"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
# Core
pydantic = "^2.5"
pydantic-settings = "^2.1"
python-dotenv = "^1.0"

# AI/LLM
instructor = "^1.2"
openai = "^1.12"
anthropic = "^0.21"
langchain = "^0.1"
langchain-openai = "^0.0.5"

# API Framework
fastapi = "^0.109"
uvicorn = {extras = ["standard"], version = "^0.27"}
httpx = "^0.26"
strawberry-graphql = "^0.217"

# CLI
typer = {extras = ["all"], version = "^0.9"}
rich = "^13.7"
click = "^8.1"

# Data Processing
pandas = "^2.1"
polars = "^0.20"
duckdb = "^0.9"
pyarrow = "^14.0"
openpyxl = "^3.1"

# Database
sqlalchemy = "^2.0"
alembic = "^1.13"
redis = "^5.0"
motor = "^3.3"

# Cloud
google-cloud-bigquery = "^3.14"
google-cloud-storage = "^2.13"
boto3 = "^1.34"

# Orchestration
prefect = "^2.14"
celery = {extras = ["redis"], version = "^5.3"}

# Monitoring & Logging
loguru = "^0.7"
sentry-sdk = "^1.40"
prometheus-client = "^0.19"

# Utilities
httpx = "^0.26"
tenacity = "^8.2"
python-multipart = "^0.0.6"
email-validator = "^2.1"
python-jose = {extras = ["cryptography"], version = "^3.3"}
passlib = {extras = ["bcrypt"], version = "^1.7"}

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4"
pytest-asyncio = "^0.23"
pytest-cov = "^4.1"
pytest-mock = "^3.12"
pytest-xdist = "^3.5"
hypothesis = "^6.92"
factory-boy = "^3.3"
faker = "^22.0"

# Code Quality
ruff = "^0.1"
black = "^23.12"
mypy = "^1.8"
isort = "^5.13"
pre-commit = "^3.6"

# Security
bandit = {extras = ["toml"], version = "^1.7"}
safety = "^3.0"
pip-audit = "^2.6"

# Documentation
mkdocs = "^1.5"
mkdocs-material = "^9.5"
mkdocstrings = {extras = ["python"], version = "^0.24"}

# Development Tools
ipython = "^8.19"
jupyter = "^1.0"
notebook = "^7.0"
debugpy = "^1.8"

[tool.poetry.scripts]
agent = "src.cli.main:app"
api = "src.api.main:start"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "COM",  # flake8-commas
    "PTH",  # flake8-use-pathlib
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
fix = true
unfixable = []
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]
per-file-ignores = {}
target-version = "py311"

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--ignore=docs",
    "--ignore=build",
    "--ignore=dist",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "scripts"]
severity = "medium"
confidence = "medium"
max_lines = 500
progress = true

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
import_heading_stdlib = "Standard library imports"
import_heading_thirdparty = "Third party imports"
import_heading_firstparty = "Local application imports"
force_single_line = false
use_parentheses = true
ensure_newline_before_comments = true
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0